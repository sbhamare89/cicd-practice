# ----------------------------
# Persistent Volume Claim for MySQL
# ----------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# ----------------------------
# ConfigMap for DB Initialization
# ----------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb-config
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS testdb;
    USE testdb;

    CREATE TABLE IF NOT EXISTS messages (
      id INT AUTO_INCREMENT PRIMARY KEY,
      message VARCHAR(255) NOT NULL
    );

    INSERT INTO messages (message) VALUES ('Hello from DB!'), ('Another row');
---
# ----------------------------
# MySQL Deployment
# ----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: rootpass
            - name: MYSQL_DATABASE
              value: testdb
            - name: MYSQL_USER
              value: testuser
            - name: MYSQL_PASSWORD
              value: testpass
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-data
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: initdb
          configMap:
            name: initdb-config
---
# ----------------------------
# MySQL Service
# ----------------------------
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
---
# ----------------------------
# Frontend Deployment
# ----------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: yourdockerid/frontend:v1
          ports:
            - containerPort: 80
---
# ----------------------------
# Frontend Service (NodePort)
# ----------------------------
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  ports:
    - port: 80
      nodePort: 30080
  selector:
    app: frontend
